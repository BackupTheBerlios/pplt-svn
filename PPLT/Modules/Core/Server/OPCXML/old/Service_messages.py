################################################## 
# ./Service_client.py 
# generated by ZSI.wsdl2python 
# 
# 
##################################################


from Service_messages import *
from Service_services_types import *
import urlparse, types
from ZSI.TCcompound import Struct
from ZSI import client
import ZSI

class BrowseSoapIn(ns1.Browse_Dec): 
    if not hasattr( ns1.Browse_Dec(), "typecode" ):
        typecode = ns1.Browse_Dec()

    def __init__(self, name=None, ns=None):
        ns1.Browse_Dec.__init__(self, name=None, ns=None)

class BrowseSoapInWrapper(BrowseSoapIn):
    """wrapper for document:literal message"""

    typecode = BrowseSoapIn( name=None, ns=None ).typecode
    def __init__( self, name=None, ns=None, **kw ):
        BrowseSoapIn.__init__( self, name=None, ns=None )

class BrowseSoapOut(ns1.BrowseResponse_Dec): 
    if not hasattr( ns1.BrowseResponse_Dec(), "typecode" ):
        typecode = ns1.BrowseResponse_Dec()

    def __init__(self, name=None, ns=None):
        ns1.BrowseResponse_Dec.__init__(self, name=None, ns=None)

class BrowseSoapOutWrapper(BrowseSoapOut):
    """wrapper for document:literal message"""

    typecode = BrowseSoapOut( name=None, ns=None ).typecode
    def __init__( self, name=None, ns=None, **kw ):
        BrowseSoapOut.__init__( self, name=None, ns=None )

class GetPropertiesSoapIn(ns1.GetProperties_Dec): 
    if not hasattr( ns1.GetProperties_Dec(), "typecode" ):
        typecode = ns1.GetProperties_Dec()

    def __init__(self, name=None, ns=None):
        ns1.GetProperties_Dec.__init__(self, name=None, ns=None)

class GetPropertiesSoapInWrapper(GetPropertiesSoapIn):
    """wrapper for document:literal message"""

    typecode = GetPropertiesSoapIn( name=None, ns=None ).typecode
    def __init__( self, name=None, ns=None, **kw ):
        GetPropertiesSoapIn.__init__( self, name=None, ns=None )

class GetPropertiesSoapOut(ns1.GetPropertiesResponse_Dec): 
    if not hasattr( ns1.GetPropertiesResponse_Dec(), "typecode" ):
        typecode = ns1.GetPropertiesResponse_Dec()

    def __init__(self, name=None, ns=None):
        ns1.GetPropertiesResponse_Dec.__init__(self, name=None, ns=None)

class GetPropertiesSoapOutWrapper(GetPropertiesSoapOut):
    """wrapper for document:literal message"""

    typecode = GetPropertiesSoapOut( name=None, ns=None ).typecode
    def __init__( self, name=None, ns=None, **kw ):
        GetPropertiesSoapOut.__init__( self, name=None, ns=None )

class GetStatusSoapIn(ns1.GetStatus_Dec): 
    if not hasattr( ns1.GetStatus_Dec(), "typecode" ):
        typecode = ns1.GetStatus_Dec()

    def __init__(self, name=None, ns=None):
        ns1.GetStatus_Dec.__init__(self, name=None, ns=None)

class GetStatusSoapInWrapper(GetStatusSoapIn):
    """wrapper for document:literal message"""

    typecode = GetStatusSoapIn( name=None, ns=None ).typecode
    def __init__( self, name=None, ns=None, **kw ):
        GetStatusSoapIn.__init__( self, name=None, ns=None )

class GetStatusSoapOut(ns1.GetStatusResponse_Dec): 
    if not hasattr( ns1.GetStatusResponse_Dec(), "typecode" ):
        typecode = ns1.GetStatusResponse_Dec()

    def __init__(self, name=None, ns=None):
        ns1.GetStatusResponse_Dec.__init__(self, name=None, ns=None)

class GetStatusSoapOutWrapper(GetStatusSoapOut):
    """wrapper for document:literal message"""

    typecode = GetStatusSoapOut( name=None, ns=None ).typecode
    def __init__( self, name=None, ns=None, **kw ):
        GetStatusSoapOut.__init__( self, name=None, ns=None )

class ReadSoapIn(ns1.Read_Dec): 
    if not hasattr( ns1.Read_Dec(), "typecode" ):
        typecode = ns1.Read_Dec()

    def __init__(self, name=None, ns=None):
        ns1.Read_Dec.__init__(self, name=None, ns=None)

class ReadSoapInWrapper(ReadSoapIn):
    """wrapper for document:literal message"""

    typecode = ReadSoapIn( name=None, ns=None ).typecode
    def __init__( self, name=None, ns=None, **kw ):
        ReadSoapIn.__init__( self, name=None, ns=None )

class ReadSoapOut(ns1.ReadResponse_Dec): 
    if not hasattr( ns1.ReadResponse_Dec(), "typecode" ):
        typecode = ns1.ReadResponse_Dec()

    def __init__(self, name=None, ns=None):
        ns1.ReadResponse_Dec.__init__(self, name=None, ns=None)

class ReadSoapOutWrapper(ReadSoapOut):
    """wrapper for document:literal message"""

    typecode = ReadSoapOut( name=None, ns=None ).typecode
    def __init__( self, name=None, ns=None, **kw ):
        ReadSoapOut.__init__( self, name=None, ns=None )

class SubscribeSoapIn(ns1.Subscribe_Dec): 
    if not hasattr( ns1.Subscribe_Dec(), "typecode" ):
        typecode = ns1.Subscribe_Dec()

    def __init__(self, name=None, ns=None):
        ns1.Subscribe_Dec.__init__(self, name=None, ns=None)

class SubscribeSoapInWrapper(SubscribeSoapIn):
    """wrapper for document:literal message"""

    typecode = SubscribeSoapIn( name=None, ns=None ).typecode
    def __init__( self, name=None, ns=None, **kw ):
        SubscribeSoapIn.__init__( self, name=None, ns=None )

class SubscribeSoapOut(ns1.SubscribeResponse_Dec): 
    if not hasattr( ns1.SubscribeResponse_Dec(), "typecode" ):
        typecode = ns1.SubscribeResponse_Dec()

    def __init__(self, name=None, ns=None):
        ns1.SubscribeResponse_Dec.__init__(self, name=None, ns=None)

class SubscribeSoapOutWrapper(SubscribeSoapOut):
    """wrapper for document:literal message"""

    typecode = SubscribeSoapOut( name=None, ns=None ).typecode
    def __init__( self, name=None, ns=None, **kw ):
        SubscribeSoapOut.__init__( self, name=None, ns=None )

class SubscriptionCancelSoapIn(ns1.SubscriptionCancel_Dec): 
    if not hasattr( ns1.SubscriptionCancel_Dec(), "typecode" ):
        typecode = ns1.SubscriptionCancel_Dec()

    def __init__(self, name=None, ns=None):
        ns1.SubscriptionCancel_Dec.__init__(self, name=None, ns=None)

class SubscriptionCancelSoapInWrapper(SubscriptionCancelSoapIn):
    """wrapper for document:literal message"""

    typecode = SubscriptionCancelSoapIn( name=None, ns=None ).typecode
    def __init__( self, name=None, ns=None, **kw ):
        SubscriptionCancelSoapIn.__init__( self, name=None, ns=None )

class SubscriptionCancelSoapOut(ns1.SubscriptionCancelResponse_Dec): 
    if not hasattr( ns1.SubscriptionCancelResponse_Dec(), "typecode" ):
        typecode = ns1.SubscriptionCancelResponse_Dec()

    def __init__(self, name=None, ns=None):
        ns1.SubscriptionCancelResponse_Dec.__init__(self, name=None, ns=None)

class SubscriptionCancelSoapOutWrapper(SubscriptionCancelSoapOut):
    """wrapper for document:literal message"""

    typecode = SubscriptionCancelSoapOut( name=None, ns=None ).typecode
    def __init__( self, name=None, ns=None, **kw ):
        SubscriptionCancelSoapOut.__init__( self, name=None, ns=None )

class SubscriptionPolledRefreshSoapIn(ns1.SubscriptionPolledRefresh_Dec): 
    if not hasattr( ns1.SubscriptionPolledRefresh_Dec(), "typecode" ):
        typecode = ns1.SubscriptionPolledRefresh_Dec()

    def __init__(self, name=None, ns=None):
        ns1.SubscriptionPolledRefresh_Dec.__init__(self, name=None, ns=None)

class SubscriptionPolledRefreshSoapInWrapper(SubscriptionPolledRefreshSoapIn):
    """wrapper for document:literal message"""

    typecode = SubscriptionPolledRefreshSoapIn( name=None, ns=None ).typecode
    def __init__( self, name=None, ns=None, **kw ):
        SubscriptionPolledRefreshSoapIn.__init__( self, name=None, ns=None )

class SubscriptionPolledRefreshSoapOut(ns1.SubscriptionPolledRefreshResponse_Dec): 
    if not hasattr( ns1.SubscriptionPolledRefreshResponse_Dec(), "typecode" ):
        typecode = ns1.SubscriptionPolledRefreshResponse_Dec()

    def __init__(self, name=None, ns=None):
        ns1.SubscriptionPolledRefreshResponse_Dec.__init__(self, name=None, ns=None)

class SubscriptionPolledRefreshSoapOutWrapper(SubscriptionPolledRefreshSoapOut):
    """wrapper for document:literal message"""

    typecode = SubscriptionPolledRefreshSoapOut( name=None, ns=None ).typecode
    def __init__( self, name=None, ns=None, **kw ):
        SubscriptionPolledRefreshSoapOut.__init__( self, name=None, ns=None )

class WriteSoapIn(ns1.Write_Dec): 
    if not hasattr( ns1.Write_Dec(), "typecode" ):
        typecode = ns1.Write_Dec()

    def __init__(self, name=None, ns=None):
        ns1.Write_Dec.__init__(self, name=None, ns=None)

class WriteSoapInWrapper(WriteSoapIn):
    """wrapper for document:literal message"""

    typecode = WriteSoapIn( name=None, ns=None ).typecode
    def __init__( self, name=None, ns=None, **kw ):
        WriteSoapIn.__init__( self, name=None, ns=None )

class WriteSoapOut(ns1.WriteResponse_Dec): 
    if not hasattr( ns1.WriteResponse_Dec(), "typecode" ):
        typecode = ns1.WriteResponse_Dec()

    def __init__(self, name=None, ns=None):
        ns1.WriteResponse_Dec.__init__(self, name=None, ns=None)

class WriteSoapOutWrapper(WriteSoapOut):
    """wrapper for document:literal message"""

    typecode = WriteSoapOut( name=None, ns=None ).typecode
    def __init__( self, name=None, ns=None, **kw ):
        WriteSoapOut.__init__( self, name=None, ns=None )