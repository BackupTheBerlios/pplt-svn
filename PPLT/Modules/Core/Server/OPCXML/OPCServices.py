################################################## 
# ./Service_services.py 
# generated by ZSI.wsdl2python 
# 
# 
##################################################


#from Service_services_types import *
import OPCTypes as ns1
import urlparse, types
from ZSI.TCcompound import Struct
from ZSI import client
import ZSI

class ServiceInterface:
    def getService(self, portAddress=None, **kw):
        raise NonImplementationError, "method not implemented"


class ServiceLocator(ServiceInterface):
    Service_address = "http://127.0.0.1:7000"
    def getServiceAddress(self):
        return ServiceLocator.Service_address

    def getService(self, portAddress=None, **kw):
        return ServiceSOAP(portAddress or ServiceLocator.Service_address, **kw)


class ServiceSOAP:

    def __init__(self, addr, **kw):
        netloc = (urlparse.urlparse(addr)[1]).split(":") + [80,]
        if not kw.has_key("host"):
            kw["host"] = netloc[0]
        if not kw.has_key("port"):
            kw["port"] = int(netloc[1])
        if not kw.has_key("url"):
            kw["url"] =  urlparse.urlparse(addr)[2]
        self.binding = client.Binding(**kw)


    def Browse(self, request):
        """
        @param: request to BrowseSoapIn::
            _PropertyNames: str, optional

        @return: response from BrowseSoapOut::
            _BrowseResult: ns1.ReplyBase_Def, optional
            _Elements: ns1.BrowseElement_Def, optional
              _Properties: ns1.ItemProperty_Def, optional
                _Value: Any, optional
            _Errors: ns1.OPCError_Def, optional
              _Text: str, optional
        """

        if not isinstance(request, BrowseSoapIn) and\
            not issubclass(BrowseSoapIn, request.__class__):
            raise TypeError, "%s incorrect request type" %(request.__class__)
        kw = {}
        response = self.binding.Send(None, None, request, soapaction="http://opcfoundation.org/webservices/XMLDA/1.0/Browse", **kw)
        response = self.binding.Receive(BrowseSoapOutWrapper())

        if not isinstance(response, BrowseSoapOut) and\
            not issubclass(BrowseSoapOut, response.__class__):
            raise TypeError, "%s incorrect response type" %(response.__class__)
        return response


    def GetProperties(self, request):
        """
        @param: request to GetPropertiesSoapIn::
            _ItemIDs: ns1.ItemIdentifier_Def, optional
            _PropertyNames: str, optional

        @return: response from GetPropertiesSoapOut::
            _Errors: ns1.OPCError_Def, optional
              _Text: str, optional
            _GetPropertiesResult: ns1.ReplyBase_Def, optional
            _PropertyLists: ns1.PropertyReplyList_Def, optional
              _Properties: ns1.ItemProperty_Def, optional
                _Value: Any, optional
        """

        if not isinstance(request, GetPropertiesSoapIn) and\
            not issubclass(GetPropertiesSoapIn, request.__class__):
            raise TypeError, "%s incorrect request type" %(request.__class__)
        kw = {}
        response = self.binding.Send(None, None, request, soapaction="http://opcfoundation.org/webservices/XMLDA/1.0/GetProperties", **kw)
        response = self.binding.Receive(GetPropertiesSoapOutWrapper())

        if not isinstance(response, GetPropertiesSoapOut) and\
            not issubclass(GetPropertiesSoapOut, response.__class__):
            raise TypeError, "%s incorrect response type" %(response.__class__)
        return response


    def GetStatus(self, request):
        """
        @param: request to GetStatusSoapIn::

        @return: response from GetStatusSoapOut::
            _GetStatusResult: ns1.ReplyBase_Def, optional
            _Status: ns1.ServerStatus_Def, optional
              _StatusInfo: str, optional
              _SupportedInterfaceVersions: ns1.interfaceVersion_Def, optional
                _interfaceVersion: str, optional
              _SupportedLocaleIDs: str, optional
              _VendorInfo: str, optional
        """

        if not isinstance(request, GetStatusSoapIn) and\
            not issubclass(GetStatusSoapIn, request.__class__):
            raise TypeError, "%s incorrect request type" %(request.__class__)
        kw = {}
        response = self.binding.Send(None, None, request, soapaction="http://opcfoundation.org/webservices/XMLDA/1.0/GetStatus", **kw)
        response = self.binding.Receive(GetStatusSoapOutWrapper())

        if not isinstance(response, GetStatusSoapOut) and\
            not issubclass(GetStatusSoapOut, response.__class__):
            raise TypeError, "%s incorrect response type" %(response.__class__)
        return response


    def Read(self, request):
        """
        @param: request to ReadSoapIn::
            _ItemList: ns1.ReadRequestItemList_Def, optional
              _Items: ns1.ReadRequestItem_Def, optional
            _Options: ns1.RequestOptions_Def, optional

        @return: response from ReadSoapOut::
            _Errors: ns1.OPCError_Def, optional
              _Text: str, optional
            _RItemList: ns1.ReplyItemList_Def, optional
              _Items: ns1.ItemValue_Def, optional
                _DiagnosticInfo: str, optional
                _Quality: ns1.OPCQuality_Def, optional
                _Value: Any, optional
            _ReadResult: ns1.ReplyBase_Def, optional
        """

        if not isinstance(request, ReadSoapIn) and\
            not issubclass(ReadSoapIn, request.__class__):
            raise TypeError, "%s incorrect request type" %(request.__class__)
        kw = {}
        response = self.binding.Send(None, None, request, soapaction="http://opcfoundation.org/webservices/XMLDA/1.0/Read", **kw)
        response = self.binding.Receive(ReadSoapOutWrapper())

        if not isinstance(response, ReadSoapOut) and\
            not issubclass(ReadSoapOut, response.__class__):
            raise TypeError, "%s incorrect response type" %(response.__class__)
        return response


    def Subscribe(self, request):
        """
        @param: request to SubscribeSoapIn::
            _ItemList: ns1.SubscribeRequestItemList_Def, optional
              _Items: ns1.SubscribeRequestItem_Def, optional
            _Options: ns1.RequestOptions_Def, optional

        @return: response from SubscribeSoapOut::
            _Errors: ns1.OPCError_Def, optional
              _Text: str, optional
            _RItemList: ns1.SubscribeReplyItemList_Def, optional
              _Items: ns1.SubscribeItemValue_Def, optional
                _ItemValue: ns1.ItemValue_Def, optional
                  _DiagnosticInfo: str, optional
                  _Quality: ns1.OPCQuality_Def, optional
                  _Value: Any, optional
            _SubscribeResult: ns1.ReplyBase_Def, optional
        """

        if not isinstance(request, SubscribeSoapIn) and\
            not issubclass(SubscribeSoapIn, request.__class__):
            raise TypeError, "%s incorrect request type" %(request.__class__)
        kw = {}
        response = self.binding.Send(None, None, request, soapaction="http://opcfoundation.org/webservices/XMLDA/1.0/Subscribe", **kw)
        response = self.binding.Receive(SubscribeSoapOutWrapper())

        if not isinstance(response, SubscribeSoapOut) and\
            not issubclass(SubscribeSoapOut, response.__class__):
            raise TypeError, "%s incorrect response type" %(response.__class__)
        return response


    def SubscriptionCancel(self, request):
        """
        @param: request to SubscriptionCancelSoapIn::

        @return: response from SubscriptionCancelSoapOut::
        """

        if not isinstance(request, SubscriptionCancelSoapIn) and\
            not issubclass(SubscriptionCancelSoapIn, request.__class__):
            raise TypeError, "%s incorrect request type" %(request.__class__)
        kw = {}
        response = self.binding.Send(None, None, request, soapaction="http://opcfoundation.org/webservices/XMLDA/1.0/SubscriptionCancel", **kw)
        response = self.binding.Receive(SubscriptionCancelSoapOutWrapper())

        if not isinstance(response, SubscriptionCancelSoapOut) and\
            not issubclass(SubscriptionCancelSoapOut, response.__class__):
            raise TypeError, "%s incorrect response type" %(response.__class__)
        return response


    def SubscriptionPolledRefresh(self, request):
        """
        @param: request to SubscriptionPolledRefreshSoapIn::
            _Options: ns1.RequestOptions_Def, optional
            _ServerSubHandles: str, optional

        @return: response from SubscriptionPolledRefreshSoapOut::
            _Errors: ns1.OPCError_Def, optional
              _Text: str, optional
            _InvalidServerSubHandles: str, optional
            _RItemList: ns1.SubscribePolledRefreshReplyItemList_Def, optional
              _Items: ns1.ItemValue_Def, optional
                _DiagnosticInfo: str, optional
                _Quality: ns1.OPCQuality_Def, optional
                _Value: Any, optional
            _SubscriptionPolledRefreshResult: ns1.ReplyBase_Def, optional
        """

        if not isinstance(request, SubscriptionPolledRefreshSoapIn) and\
            not issubclass(SubscriptionPolledRefreshSoapIn, request.__class__):
            raise TypeError, "%s incorrect request type" %(request.__class__)
        kw = {}
        response = self.binding.Send(None, None, request, soapaction="http://opcfoundation.org/webservices/XMLDA/1.0/SubscriptionPolledRefresh", **kw)
        response = self.binding.Receive(SubscriptionPolledRefreshSoapOutWrapper())

        if not isinstance(response, SubscriptionPolledRefreshSoapOut) and\
            not issubclass(SubscriptionPolledRefreshSoapOut, response.__class__):
            raise TypeError, "%s incorrect response type" %(response.__class__)
        return response


    def Write(self, request):
        """
        @param: request to WriteSoapIn::
            _ItemList: ns1.WriteRequestItemList_Def, optional
              _Items: ns1.ItemValue_Def, optional
                _DiagnosticInfo: str, optional
                _Quality: ns1.OPCQuality_Def, optional
                _Value: Any, optional
            _Options: ns1.RequestOptions_Def, optional

        @return: response from WriteSoapOut::
            _Errors: ns1.OPCError_Def, optional
              _Text: str, optional
            _RItemList: ns1.ReplyItemList_Def, optional
              _Items: ns1.ItemValue_Def, optional
                _DiagnosticInfo: str, optional
                _Quality: ns1.OPCQuality_Def, optional
                _Value: Any, optional
            _WriteResult: ns1.ReplyBase_Def, optional
        """

        if not isinstance(request, WriteSoapIn) and\
            not issubclass(WriteSoapIn, request.__class__):
            raise TypeError, "%s incorrect request type" %(request.__class__)
        kw = {}
        response = self.binding.Send(None, None, request, soapaction="http://opcfoundation.org/webservices/XMLDA/1.0/Write", **kw)
        response = self.binding.Receive(WriteSoapOutWrapper())

        if not isinstance(response, WriteSoapOut) and\
            not issubclass(WriteSoapOut, response.__class__):
            raise TypeError, "%s incorrect response type" %(response.__class__)
        return response



class BrowseSoapIn(ns1.Browse_Dec): 
    if not hasattr( ns1.Browse_Dec(), "typecode" ):
        typecode = ns1.Browse_Dec()

    def __init__(self, name=None, ns=None):
        ns1.Browse_Dec.__init__(self, name=None, ns=None)

class BrowseSoapInWrapper(BrowseSoapIn):
    """wrapper for document:literal message"""

    typecode = BrowseSoapIn( name=None, ns=None ).typecode
    def __init__( self, name=None, ns=None, **kw ):
        BrowseSoapIn.__init__( self, name=None, ns=None )

class BrowseSoapOut(ns1.BrowseResponse_Dec): 
    if not hasattr( ns1.BrowseResponse_Dec(), "typecode" ):
        typecode = ns1.BrowseResponse_Dec()

    def __init__(self, name=None, ns=None):
        ns1.BrowseResponse_Dec.__init__(self, name=None, ns=None)

class BrowseSoapOutWrapper(BrowseSoapOut):
    """wrapper for document:literal message"""

    typecode = BrowseSoapOut( name=None, ns=None ).typecode
    def __init__( self, name=None, ns=None, **kw ):
        BrowseSoapOut.__init__( self, name=None, ns=None )

class GetPropertiesSoapIn(ns1.GetProperties_Dec): 
    if not hasattr( ns1.GetProperties_Dec(), "typecode" ):
        typecode = ns1.GetProperties_Dec()

    def __init__(self, name=None, ns=None):
        ns1.GetProperties_Dec.__init__(self, name=None, ns=None)

class GetPropertiesSoapInWrapper(GetPropertiesSoapIn):
    """wrapper for document:literal message"""

    typecode = GetPropertiesSoapIn( name=None, ns=None ).typecode
    def __init__( self, name=None, ns=None, **kw ):
        GetPropertiesSoapIn.__init__( self, name=None, ns=None )

class GetPropertiesSoapOut(ns1.GetPropertiesResponse_Dec): 
    if not hasattr( ns1.GetPropertiesResponse_Dec(), "typecode" ):
        typecode = ns1.GetPropertiesResponse_Dec()

    def __init__(self, name=None, ns=None):
        ns1.GetPropertiesResponse_Dec.__init__(self, name=None, ns=None)

class GetPropertiesSoapOutWrapper(GetPropertiesSoapOut):
    """wrapper for document:literal message"""

    typecode = GetPropertiesSoapOut( name=None, ns=None ).typecode
    def __init__( self, name=None, ns=None, **kw ):
        GetPropertiesSoapOut.__init__( self, name=None, ns=None )

class GetStatusSoapIn(ns1.GetStatus_Dec): 
    if not hasattr( ns1.GetStatus_Dec(), "typecode" ):
        typecode = ns1.GetStatus_Dec()

    def __init__(self, name=None, ns=None):
        ns1.GetStatus_Dec.__init__(self, name=None, ns=None)

class GetStatusSoapInWrapper(GetStatusSoapIn):
    """wrapper for document:literal message"""

    typecode = GetStatusSoapIn( name=None, ns=None ).typecode
    def __init__( self, name=None, ns=None, **kw ):
        GetStatusSoapIn.__init__( self, name=None, ns=None )

class GetStatusSoapOut(ns1.GetStatusResponse_Dec):
    if not hasattr( ns1.GetStatusResponse_Dec(), "typecode" ):
        typecode = ns1.GetStatusResponse_Dec()

    def __init__(self, name=None, ns=None):
        ns1.GetStatusResponse_Dec.__init__(self, name=None, ns=None)

class GetStatusSoapOutWrapper(GetStatusSoapOut):
    """wrapper for document:literal message"""

    typecode = GetStatusSoapOut( name=None, ns=None ).typecode
    def __init__( self, name=None, ns=None, **kw ):
        GetStatusSoapOut.__init__( self, name=None, ns=None )

class ReadSoapIn(ns1.Read_Dec):
    if not hasattr( ns1.Read_Dec(), "typecode" ):
        typecode = ns1.Read_Dec()

    def __init__(self, name=None, ns=None):
        ns1.Read_Dec.__init__(self, name=None, ns=None)

class ReadSoapInWrapper(ReadSoapIn):
    """wrapper for document:literal message"""

    typecode = ReadSoapIn( name=None, ns=None ).typecode
    def __init__( self, name=None, ns=None, **kw ):
        ReadSoapIn.__init__( self, name=None, ns=None )

class ReadSoapOut(ns1.ReadResponse_Dec): 
    if not hasattr( ns1.ReadResponse_Dec(), "typecode" ):
        typecode = ns1.ReadResponse_Dec()

    def __init__(self, name=None, ns=None):
        ns1.ReadResponse_Dec.__init__(self, name=None, ns=None)

class ReadSoapOutWrapper(ReadSoapOut):
    """wrapper for document:literal message"""

    typecode = ReadSoapOut( name=None, ns=None ).typecode
    def __init__( self, name=None, ns=None, **kw ):
        ReadSoapOut.__init__( self, name=None, ns=None )

class SubscribeSoapIn(ns1.Subscribe_Dec): 
    if not hasattr( ns1.Subscribe_Dec(), "typecode" ):
        typecode = ns1.Subscribe_Dec()

    def __init__(self, name=None, ns=None):
        ns1.Subscribe_Dec.__init__(self, name=None, ns=None)

class SubscribeSoapInWrapper(SubscribeSoapIn):
    """wrapper for document:literal message"""

    typecode = SubscribeSoapIn( name=None, ns=None ).typecode
    def __init__( self, name=None, ns=None, **kw ):
        SubscribeSoapIn.__init__( self, name=None, ns=None )

class SubscribeSoapOut(ns1.SubscribeResponse_Dec): 
    if not hasattr( ns1.SubscribeResponse_Dec(), "typecode" ):
        typecode = ns1.SubscribeResponse_Dec()

    def __init__(self, name=None, ns=None):
        ns1.SubscribeResponse_Dec.__init__(self, name=None, ns=None)

class SubscribeSoapOutWrapper(SubscribeSoapOut):
    """wrapper for document:literal message"""

    typecode = SubscribeSoapOut( name=None, ns=None ).typecode
    def __init__( self, name=None, ns=None, **kw ):
        SubscribeSoapOut.__init__( self, name=None, ns=None )

class SubscriptionCancelSoapIn(ns1.SubscriptionCancel_Dec): 
    if not hasattr( ns1.SubscriptionCancel_Dec(), "typecode" ):
        typecode = ns1.SubscriptionCancel_Dec()

    def __init__(self, name=None, ns=None):
        ns1.SubscriptionCancel_Dec.__init__(self, name=None, ns=None)

class SubscriptionCancelSoapInWrapper(SubscriptionCancelSoapIn):
    """wrapper for document:literal message"""

    typecode = SubscriptionCancelSoapIn( name=None, ns=None ).typecode
    def __init__( self, name=None, ns=None, **kw ):
        SubscriptionCancelSoapIn.__init__( self, name=None, ns=None )

class SubscriptionCancelSoapOut(ns1.SubscriptionCancelResponse_Dec): 
    if not hasattr( ns1.SubscriptionCancelResponse_Dec(), "typecode" ):
        typecode = ns1.SubscriptionCancelResponse_Dec()

    def __init__(self, name=None, ns=None):
        ns1.SubscriptionCancelResponse_Dec.__init__(self, name=None, ns=None)

class SubscriptionCancelSoapOutWrapper(SubscriptionCancelSoapOut):
    """wrapper for document:literal message"""

    typecode = SubscriptionCancelSoapOut( name=None, ns=None ).typecode
    def __init__( self, name=None, ns=None, **kw ):
        SubscriptionCancelSoapOut.__init__( self, name=None, ns=None )

class SubscriptionPolledRefreshSoapIn(ns1.SubscriptionPolledRefresh_Dec): 
    if not hasattr( ns1.SubscriptionPolledRefresh_Dec(), "typecode" ):
        typecode = ns1.SubscriptionPolledRefresh_Dec()

    def __init__(self, name=None, ns=None):
        ns1.SubscriptionPolledRefresh_Dec.__init__(self, name=None, ns=None)

class SubscriptionPolledRefreshSoapInWrapper(SubscriptionPolledRefreshSoapIn):
    """wrapper for document:literal message"""

    typecode = SubscriptionPolledRefreshSoapIn( name=None, ns=None ).typecode
    def __init__( self, name=None, ns=None, **kw ):
        SubscriptionPolledRefreshSoapIn.__init__( self, name=None, ns=None )

class SubscriptionPolledRefreshSoapOut(ns1.SubscriptionPolledRefreshResponse_Dec): 
    if not hasattr( ns1.SubscriptionPolledRefreshResponse_Dec(), "typecode" ):
        typecode = ns1.SubscriptionPolledRefreshResponse_Dec()

    def __init__(self, name=None, ns=None):
        ns1.SubscriptionPolledRefreshResponse_Dec.__init__(self, name=None, ns=None)

class SubscriptionPolledRefreshSoapOutWrapper(SubscriptionPolledRefreshSoapOut):
    """wrapper for document:literal message"""

    typecode = SubscriptionPolledRefreshSoapOut( name=None, ns=None ).typecode
    def __init__( self, name=None, ns=None, **kw ):
        SubscriptionPolledRefreshSoapOut.__init__( self, name=None, ns=None )

class WriteSoapIn(ns1.Write_Dec): 
    if not hasattr( ns1.Write_Dec(), "typecode" ):
        typecode = ns1.Write_Dec()

    def __init__(self, name=None, ns=None):
        ns1.Write_Dec.__init__(self, name=None, ns=None)

class WriteSoapInWrapper(WriteSoapIn):
    """wrapper for document:literal message"""

    typecode = WriteSoapIn( name=None, ns=None ).typecode
    def __init__( self, name=None, ns=None, **kw ):
        WriteSoapIn.__init__( self, name=None, ns=None )

class WriteSoapOut(ns1.WriteResponse_Dec): 
    if not hasattr( ns1.WriteResponse_Dec(), "typecode" ):
        typecode = ns1.WriteResponse_Dec()

    def __init__(self, name=None, ns=None):
        ns1.WriteResponse_Dec.__init__(self, name=None, ns=None)

class WriteSoapOutWrapper(WriteSoapOut):
    """wrapper for document:literal message"""

    typecode = WriteSoapOut( name=None, ns=None ).typecode
    def __init__( self, name=None, ns=None, **kw ):
        WriteSoapOut.__init__( self, name=None, ns=None )
