################################################## 
# ./Service_client.py 
# generated by ZSI.wsdl2python 
# 
# 
##################################################


from Service_messages import *
from Service_services_types import *
import urlparse, types
from ZSI.TCcompound import Struct
from ZSI import client
import ZSI

class ServiceInterface:
    def getService(self, portAddress=None, **kw):
        raise NonImplementationError, "method not implemented"


class ServiceLocator(ServiceInterface):
    Service_address = "http://127.0.0.1:7000"
    def getServiceAddress(self):
        return ServiceLocator.Service_address

    def getService(self, portAddress=None, **kw):
        return ServiceSOAP(portAddress or ServiceLocator.Service_address, **kw)


class ServiceSOAP:

    def __init__(self, addr, **kw):
        netloc = (urlparse.urlparse(addr)[1]).split(":") + [80,]
        if not kw.has_key("host"):
            kw["host"] = netloc[0]
        if not kw.has_key("port"):
            kw["port"] = int(netloc[1])
        if not kw.has_key("url"):
            kw["url"] =  urlparse.urlparse(addr)[2]
        self.binding = client.Binding(**kw)


    def Browse(self, parameters):
        """
        @param: request to BrowseSoapIn::
            _PropertyNames: str, optional

        @return: response from BrowseSoapOut::
            _BrowseResult: ns1.ReplyBase_, optional
            _Elements: ns1.BrowseElement_, optional
              _Properties: ns1.ItemProperty_, optional
                _Value: Any, optional
            _Errors: ns1.OPCError_, optional
              _Text: str, optional
        """

        request = BrowseSoapIn()
        request.parameters = parameters

        kw = {}
        response = self.binding.Send(None, None, request, soapaction="http://opcfoundation.org/webservices/XMLDA/1.0/Browse", **kw)
        response = self.binding.Receive(BrowseSoapOutWrapper())

        if not isinstance(response, BrowseSoapOut) and\
            not issubclass(BrowseSoapOut, response.__class__):
            raise TypeError, "%s incorrect response type" %(response.__class__)

        parameters = response.parameters
        return parameters


    def GetProperties(self, parameters):
        """
        @param: request to GetPropertiesSoapIn::
            _ItemIDs: ns1.ItemIdentifier_, optional
            _PropertyNames: str, optional

        @return: response from GetPropertiesSoapOut::
            _Errors: ns1.OPCError_, optional
              _Text: str, optional
            _GetPropertiesResult: ns1.ReplyBase_, optional
            _PropertyLists: ns1.PropertyReplyList_, optional
              _Properties: ns1.ItemProperty_, optional
                _Value: Any, optional
        """

        request = GetPropertiesSoapIn()
        request.parameters = parameters

        kw = {}
        response = self.binding.Send(None, None, request, soapaction="http://opcfoundation.org/webservices/XMLDA/1.0/GetProperties", **kw)
        response = self.binding.Receive(GetPropertiesSoapOutWrapper())

        if not isinstance(response, GetPropertiesSoapOut) and\
            not issubclass(GetPropertiesSoapOut, response.__class__):
            raise TypeError, "%s incorrect response type" %(response.__class__)

        parameters = response.parameters
        return parameters


    def GetStatus(self, parameters):
        """
        @param: request to GetStatusSoapIn::

        @return: response from GetStatusSoapOut::
            _GetStatusResult: ns1.ReplyBase_, optional
            _Status: ns1.ServerStatus_, optional
              _StatusInfo: str, optional
              _SupportedInterfaceVersions: ns1.interfaceVersion_, optional
                _interfaceVersion: str, optional
              _SupportedLocaleIDs: str, optional
              _VendorInfo: str, optional
        """

        request = GetStatusSoapIn()
        request.parameters = parameters

        kw = {}
        response = self.binding.Send(None, None, request, soapaction="http://opcfoundation.org/webservices/XMLDA/1.0/GetStatus", **kw)
        response = self.binding.Receive(GetStatusSoapOutWrapper())

        if not isinstance(response, GetStatusSoapOut) and\
            not issubclass(GetStatusSoapOut, response.__class__):
            raise TypeError, "%s incorrect response type" %(response.__class__)

        parameters = response.parameters
        return parameters


    def Read(self, parameters):
        """
        @param: request to ReadSoapIn::
            _ItemList: ns1.ReadRequestItemList_, optional
              _Items: ns1.ReadRequestItem_, optional
            _Options: ns1.RequestOptions_, optional

        @return: response from ReadSoapOut::
            _Errors: ns1.OPCError_, optional
              _Text: str, optional
            _RItemList: ns1.ReplyItemList_, optional
              _Items: ns1.ItemValue_, optional
                _DiagnosticInfo: str, optional
                _Quality: ns1.OPCQuality_, optional
                _Value: Any, optional
            _ReadResult: ns1.ReplyBase_, optional
        """

        request = ReadSoapIn()
        request.parameters = parameters

        kw = {}
        response = self.binding.Send(None, None, request, soapaction="http://opcfoundation.org/webservices/XMLDA/1.0/Read", **kw)
        response = self.binding.Receive(ReadSoapOutWrapper())

        if not isinstance(response, ReadSoapOut) and\
            not issubclass(ReadSoapOut, response.__class__):
            raise TypeError, "%s incorrect response type" %(response.__class__)

        parameters = response.parameters
        return parameters


    def Subscribe(self, parameters):
        """
        @param: request to SubscribeSoapIn::
            _ItemList: ns1.SubscribeRequestItemList_, optional
              _Items: ns1.SubscribeRequestItem_, optional
            _Options: ns1.RequestOptions_, optional

        @return: response from SubscribeSoapOut::
            _Errors: ns1.OPCError_, optional
              _Text: str, optional
            _RItemList: ns1.SubscribeReplyItemList_, optional
              _Items: ns1.SubscribeItemValue_, optional
                _ItemValue: ns1.ItemValue_, optional
                  _DiagnosticInfo: str, optional
                  _Quality: ns1.OPCQuality_, optional
                  _Value: Any, optional
            _SubscribeResult: ns1.ReplyBase_, optional
        """

        request = SubscribeSoapIn()
        request.parameters = parameters

        kw = {}
        response = self.binding.Send(None, None, request, soapaction="http://opcfoundation.org/webservices/XMLDA/1.0/Subscribe", **kw)
        response = self.binding.Receive(SubscribeSoapOutWrapper())

        if not isinstance(response, SubscribeSoapOut) and\
            not issubclass(SubscribeSoapOut, response.__class__):
            raise TypeError, "%s incorrect response type" %(response.__class__)

        parameters = response.parameters
        return parameters


    def SubscriptionCancel(self, parameters):
        """
        @param: request to SubscriptionCancelSoapIn::

        @return: response from SubscriptionCancelSoapOut::
        """

        request = SubscriptionCancelSoapIn()
        request.parameters = parameters

        kw = {}
        response = self.binding.Send(None, None, request, soapaction="http://opcfoundation.org/webservices/XMLDA/1.0/SubscriptionCancel", **kw)
        response = self.binding.Receive(SubscriptionCancelSoapOutWrapper())

        if not isinstance(response, SubscriptionCancelSoapOut) and\
            not issubclass(SubscriptionCancelSoapOut, response.__class__):
            raise TypeError, "%s incorrect response type" %(response.__class__)

        parameters = response.parameters
        return parameters


    def SubscriptionPolledRefresh(self, parameters):
        """
        @param: request to SubscriptionPolledRefreshSoapIn::
            _Options: ns1.RequestOptions_, optional
            _ServerSubHandles: str, optional

        @return: response from SubscriptionPolledRefreshSoapOut::
            _Errors: ns1.OPCError_, optional
              _Text: str, optional
            _InvalidServerSubHandles: str, optional
            _RItemList: ns1.SubscribePolledRefreshReplyItemList_, optional
              _Items: ns1.ItemValue_, optional
                _DiagnosticInfo: str, optional
                _Quality: ns1.OPCQuality_, optional
                _Value: Any, optional
            _SubscriptionPolledRefreshResult: ns1.ReplyBase_, optional
        """

        request = SubscriptionPolledRefreshSoapIn()
        request.parameters = parameters

        kw = {}
        response = self.binding.Send(None, None, request, soapaction="http://opcfoundation.org/webservices/XMLDA/1.0/SubscriptionPolledRefresh", **kw)
        response = self.binding.Receive(SubscriptionPolledRefreshSoapOutWrapper())

        if not isinstance(response, SubscriptionPolledRefreshSoapOut) and\
            not issubclass(SubscriptionPolledRefreshSoapOut, response.__class__):
            raise TypeError, "%s incorrect response type" %(response.__class__)

        parameters = response.parameters
        return parameters


    def Write(self, parameters):
        """
        @param: request to WriteSoapIn::
            _ItemList: ns1.WriteRequestItemList_, optional
              _Items: ns1.ItemValue_, optional
                _DiagnosticInfo: str, optional
                _Quality: ns1.OPCQuality_, optional
                _Value: Any, optional
            _Options: ns1.RequestOptions_, optional

        @return: response from WriteSoapOut::
            _Errors: ns1.OPCError_, optional
              _Text: str, optional
            _RItemList: ns1.ReplyItemList_, optional
              _Items: ns1.ItemValue_, optional
                _DiagnosticInfo: str, optional
                _Quality: ns1.OPCQuality_, optional
                _Value: Any, optional
            _WriteResult: ns1.ReplyBase_, optional
        """

        request = WriteSoapIn()
        request.parameters = parameters

        kw = {}
        response = self.binding.Send(None, None, request, soapaction="http://opcfoundation.org/webservices/XMLDA/1.0/Write", **kw)
        response = self.binding.Receive(WriteSoapOutWrapper())

        if not isinstance(response, WriteSoapOut) and\
            not issubclass(WriteSoapOut, response.__class__):
            raise TypeError, "%s incorrect response type" %(response.__class__)

        parameters = response.parameters
        return parameters


