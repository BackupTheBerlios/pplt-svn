<?xml version="1.0"?>

<grammar>

<!-- Document-Element: "Module"
    This element defined the document to be an description of a module.
    Thie element take the attribute "version" which specifies the grammar-
    version.  //-->
    <start>
        <element name="Module">
            <!-- This attribute specifies the grammar-vesion. (1.0) //-->
            <attribute name="version">
                <string>1.0</string>
            </attribute>

            <!-- This optional element specifies the Authorname of the module.
                //-->
            <optional><element name="Author"><anyString/></element></optional>

            <!-- This element specifies the version-string of the module //-->
            <element name="Version"><anyString/></element>

            <!-- The following elements specifies the archive-name and class-
                name where to find the module. 
        
                The archive-name can contain a file-path. If the filepath is 
                not absolute, it will be interpreted as relative to the path 
                where the module-meta-file is located. 
        
                The class name can be specified as FILENAME.CLASSNAME or only 
                CLASSNAME. If the second version is used the classname will be
                interpreted as FILENAME==CLASSNAME. Wich means that the 
                filename where the class is defined should have the same name 
                like the class. 
        
                EXMAPLE: A archive test.zip which holds the file test.py which
                    defines the classes test and second_test can be described 
                    by:
                for test.zip/test.py/test:
                    <Archive>test.zip</Archive>
                    <Class>test</Class>
                or:
                    <Archive>test.zip</Archive>
                    <Class>test.test</Class>
        
                for test.zip/test.py/second_test:
                    <Archive>test.zip</Archive>
                    <Class>test.second_test</Class> (there is no short form!) 
                //-->
            <element name="Archive"><anyString/></element>
            <element name="Class"><anyString/></element>

        <!-- The optional elements "Descrtiption" can be used to document the
            module in several languages, which are specified by the "lang"
            attribute. //--> 
            <zeroOrMore> <ref name="description"/> </zeroOrMore>            


        <!-- The optional element "Requires" specifies the dependencies of the
            module. Witch means the parameters the module may take or the 
            python module the module depends on. //-->
            <optional>
                <element name="Requires">
                <!-- The "Parameter" elements defines the parameters the 
                    module takes to setup. Note: describe ALL parameters the 
                    module may take. Even optional ones. The importer will 
                    check for all paramters present and will add missing 
                    optional ones. So the module developer do not need to 
                    check if all paramters are present! The importer will to 
                    it for you!  This element takes the attribute "name" which
                    specifies the name of the parameter. The optional attribue
                    "default" specifies the default value for this parameter.
                    This value will be used to expand the parameters by the 
                    importer to load the module. Optional you may specify some
                    "Description" tags to document the parameters and there 
                    meanings. //-->
                    <zeroOrMore>
                    <element name="Parameter">
                        <attribute name="name"/>
                        <optional><attribute name="default"/></optional> 
                        <zeroOrMore> <ref name="description"/> </zeroOrMore>
                    </element>
                    </zeroOrMore>
                <!-- The element "PyModule" simply specifies the modules, the 
                    module depends on. The import will try to find them before
                    loading a module. //-->
                    <zeroOrMore>
                    <element name="PyModule"> <anyString/> </element>
                    </zeroOrMore>
                </element>
            </optional>


        <!-- With the optional element "Provies" you specify the inputs and 
            outputs of a module. But you should specify all if you want to use
            the module inside the GUI. //-->
            <optional>
                <element name="Provides">
                <!-- With "Input" you can specify inputs of your module. With
                    name you specify the name of the input. Or an alias if you
                    used the attribute "pattern". The attribute "type" 
                    specifies the type of the input. Note: Sometimes it is not
                    possible to specify each input a module provides. In this
                    case the pattern attribute should specify a RegExp that 
                    matches a group of inputs. In this case the name attribute
                    will be used to name the group of inputs. Optional you may
                    specify a description of the input using the "Description"
                    Tags inside. //-->
                    <zeroOrMore>
                    <element name="Input">
                        <attribute name="name"/>
                        <attribute name="type"/>
                        <optional><attribute name="pattern"/></optional>
                        <zeroOrMore> <ref name="description"/> </zeroOrMore>
                    </element>
                    </zeroOrMore>

                <!-- The "Output" tag specifies an output in the same way like
                    the "Input" tag does. So refer to the description of the 
                    "Input" tag to find out how. //-->
                    <zeroOrMore>
                    <element name="Output"> 
                        <attribute name="name"/>
                        <attribute name="type"/>
                        <optional><attribute name="pattern"/></optional>
                        <zeroOrMore> <ref name="description"/> </zeroOrMore>
                    </element>
                    </zeroOrMore>
                </element>
            </optional>


            <!-- Inside the optional "Layout" tag you can specify rules how to
                display the module in the GUI. //-->
            <optional>
            <element name="Layout">
                <oneOrMore> <ref name="rule"/> </oneOrMore>                
            </element>
            </optional>
        </element>
    </start>


    <define name="description">
        <element name="Description">
            <attribute name="lang"/>
        </element>
    </define>


    <define name="rule">
        <!-- A Rule can be used to specify how an in- or output is displayed 
            on the GUI. A rule take a "name" or "pattern" attribute to specify
            which in- or outputs matching this rule. 
            Any rule can contain other rules to specialize the rule for a 
            defined subset of in/outputs.
            //-->
        <element name="Rule">
            <choice>
                <attribute name="name"/>
                <attribute name="pattern"/>
            </choice>
            
            <!-- This element specifies where to put the in/output. //-->
            <element name="Position">
                <choice>
                    <string>left</string>
                    <string>right</string>
                </choice>
            </element>
            
            <!-- This optional element specifies the weight of the in/output.
                The weight will be used to sort the pins on one side.//-->
            <element name="Weight"></anyString></element>
            
            <!-- Subrules //-->
            <zeroOrMore> <ref name="rule"/> </zeroOrMore>              
        </element>
    </define>
    
</grammar>    
