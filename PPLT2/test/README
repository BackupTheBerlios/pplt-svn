 === PPLTTest-Suite ===

 This is the lightweight PPLTTest suite. To use it, simply copy the files 
 ppltTest.h and ppltTest.cpp into your source directory and complile them with
 your test-code. 

 To create a test suite simply derive a class from the PPLTTest::cTest class
 like the following ones:

 #include "ppltTest.h"

 class mySubTest: public PPLTTest::cTest{
    TEST_DECLARATION
        TEST_ADD(subtest1);
    TEST_DECLARAION_END

    public:
        void subtest1( void ){
            ASSUME_NO_THROW( int a = 1; );                       //OK
            ASSUME_THROW( trow std::string("..."), std::string); //OK
        }           
 };

 class myTest: public PPLTTest::cTest{
    TEST_DECLARATION
        TEST_ADD(test1);
        TEST_ADD_SUB(mySubTest);
        TEST_ADD(test2);
        TEST_ADD_SUB(mySubTest);
        TEST_ADD(test1);
    TEST_DECLARAION_END        

    public:
        void test1( void ){
            ASSUME_TRUE( 1 == 1 );                              //OK
            ASSUME_FALSE( 1 == 0 );                             //OK
        }

        void test2( void ){
            ASSUME_NO_THROW( throw std::string("...") );        //FAIL
            ASSUME_TRUE( throw std::string("...") );            //ERROR
        }            
 };

 int main( void ){
    START_TEST(myTest);
 }

 Ok, the Testsuite starts with myTest::test1 this test succeeds. Then it will 
 call the tests in mySubTest because these will also succeed it will continue 
 with myTest::test2. This test will fail and so the subtest mySubTest will not
 be run again. But all left tests on the same level, so the test myTest::test1 
 will be run again. 

 I hope this very basic introduction will satisfy your needs. If not, please 
 contact me by mail: hmatuschek[at]gmx[dot]net. 

 Note: This piece of software will only compile with GCC version > 3.3 under 
       Linux but it may be simple to port it to other compilers and platforms.
       If you wanted this to be ported, please contact me.
